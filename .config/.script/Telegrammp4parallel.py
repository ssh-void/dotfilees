#!/usr/bin/env python3
import os
import asyncio
from telethon import TelegramClient
from telethon.tl.types import DocumentAttributeFilename


# üìå Remplace par tes identifiants API
api_id = xxxxxxx   # Ton API ID
api_hash = 'xxxxxxxxxxxxxxxxx'  # Ton API Hash
channel_username = "xxxxxxxxxx"  # Ex: 't.me/nom_du_canal' ‚Üí mettre 'nom_du_canal' pas @
download_folder = "NamofFoldr"  # Dossier de t√©l√©chargement

# üìÅ Cr√©er le dossier si inexistant
os.makedirs(download_folder, exist_ok=True)

# üîí Limiter les t√©l√©chargements simultan√©s
sema = asyncio.Semaphore(3)  # Maximum 3 t√©l√©chargements √† la fois

# Fonction pour t√©l√©charger une vid√©o
async def download_video(message, filename):
    path = os.path.join(download_folder, filename)
    async with sema:
        print(f"üì• T√©l√©chargement vid√©o : {path}")
        try:
            await message.download_media(file=path)
        except Exception as e:
            print(f"‚ùå Erreur lors du t√©l√©chargement : {e}")

# Fonction principale asynchrone
async def main():
    async with TelegramClient('session_name', api_id, api_hash) as client:
        print("‚úÖ Connect√© √† Telegram !")

        # R√©cup√©rer tous les messages
        messages = await client.get_messages(channel_username, limit=None)
        messages = sorted(messages, key=lambda msg: msg.date)

        tasks = []
        video_counter = 0

        for message in messages:
            if message.video:
                filename = message.file.name or f"video_{video_counter}.mp4"
                # Nettoyage du nom
                filename = "".join(c if c.isalnum() or c in " _-." else "_" for c in filename)
                filename = f"{video_counter:03d}-{filename}"
                tasks.append(download_video(message, filename))
                video_counter += 1

        # Lancer tous les t√©l√©chargements avec limitation du s√©maphore
        await asyncio.gather(*tasks)

    print("‚úÖ Toutes les vid√©os ont √©t√© t√©l√©charg√©es avec num√©rotation !")

# Lancer le script
if __name__ == "__main__":
    asyncio.run(main())
